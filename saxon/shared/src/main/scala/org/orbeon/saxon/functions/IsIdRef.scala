////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package org.orbeon.saxon.functions

import org.orbeon.saxon.expr.XPathContext

import org.orbeon.saxon.lib.ExtensionFunctionCall

import org.orbeon.saxon.lib.ExtensionFunctionDefinition

import org.orbeon.saxon.lib.NamespaceConstant

import org.orbeon.saxon.om.Item

import org.orbeon.saxon.om.NodeInfo

import org.orbeon.saxon.om.Sequence

import org.orbeon.saxon.om.StructuredQName

import org.orbeon.saxon.trans.XPathException

import org.orbeon.saxon.value.BooleanValue

import org.orbeon.saxon.value.SequenceType

import IsIdRef._




object IsIdRef {

  private val qName: StructuredQName =
    new StructuredQName("", NamespaceConstant.SAXON, "is-idref")

  private class IsIdRefCall extends ExtensionFunctionCall {

    def call(context: XPathContext, arguments: Array[Sequence]): BooleanValue = {
      val contextItem: Item = context.getContextItem
      BooleanValue.get(contextItem
        .isInstanceOf[NodeInfo] && contextItem.asInstanceOf[NodeInfo].isIdref)
    }

    override def effectiveBooleanValue(context: XPathContext,
                                       arguments: Array[Sequence]): Boolean = {
      val contextItem: Item = context.getContextItem
      contextItem
        .isInstanceOf[NodeInfo] && contextItem.asInstanceOf[NodeInfo].isIdref
    }

  }

}

class IsIdRef extends ExtensionFunctionDefinition {

  def getFunctionQName(): StructuredQName = qName

  override def getMinimumNumberOfArguments(): Int = 0

  override def getMaximumNumberOfArguments(): Int = 0

  def getArgumentTypes: Array[SequenceType] = Array()

  def getResultType(suppliedArgumentTypes: Array[SequenceType]): SequenceType =
    SequenceType.SINGLE_BOOLEAN

  /*@NotNull*/

  def makeCallExpression(): ExtensionFunctionCall = new IsIdRefCall()

}

// Copyright (c) 2018-2020 Saxonica Limited
// This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
// If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
// This Source Code Form is "Incompatible With Secondary Licenses", as defined by the Mozilla Public License, v. 2.0.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
  * This class implements the saxon:is-idref() extension function,
  * which is specially-recognized by the system because calls are generated by the optimizer.
  * <p>The function signature is <code>saxon:is-idref() as boolean</code></p>
  * <p>The result is true if the context item is a node having the idref property.</p>
  */
