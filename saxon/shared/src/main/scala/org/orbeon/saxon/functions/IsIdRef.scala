////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018-2020 Saxonica Limited
// This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
// If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
// This Source Code Form is "Incompatible With Secondary Licenses", as defined by the Mozilla Public License, v. 2.0.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package org.orbeon.saxon.functions

import org.orbeon.saxon.expr.XPathContext
import org.orbeon.saxon.functions.IsIdRef._
import org.orbeon.saxon.lib.{ExtensionFunctionCall, ExtensionFunctionDefinition, NamespaceConstant}
import org.orbeon.saxon.om.{NodeInfo, Sequence, StructuredQName}
import org.orbeon.saxon.value.{BooleanValue, SequenceType}


/**
  * This class implements the saxon:is-idref() extension function,
  * which is specially-recognized by the system because calls are generated by the optimizer.
 *
  * The function signature is `saxon:is-idref() as boolean
 *
  * The result is true if the context item is a node having the idref property.
  */
object IsIdRef {

  private val qName: StructuredQName =
    new StructuredQName("", NamespaceConstant.SAXON, "is-idref")

  private class IsIdRefCall extends ExtensionFunctionCall {

    def call(
      context  : XPathContext,
      arguments: Array[Sequence]
    ): BooleanValue = {
      val contextItem = context.getContextItem
      BooleanValue.get(contextItem.isInstanceOf[NodeInfo] && contextItem.asInstanceOf[NodeInfo].isIdref)
    }

    override def effectiveBooleanValue(
      context  : XPathContext,
      arguments: Array[Sequence]
    ): Boolean = {
      val contextItem = context.getContextItem
      contextItem.isInstanceOf[NodeInfo] && contextItem.asInstanceOf[NodeInfo].isIdref
    }
  }
}

class IsIdRef extends ExtensionFunctionDefinition {

  def getFunctionQName: StructuredQName = qName

  override def getMinimumNumberOfArguments: Int = 0
  override def getMaximumNumberOfArguments: Int = 0

  def getArgumentTypes: Array[SequenceType] = Array.empty

  def getResultType(suppliedArgumentTypes: Array[SequenceType]): SequenceType =
    SequenceType.SINGLE_BOOLEAN

  /*@NotNull*/
  def makeCallExpression(): ExtensionFunctionCall = new IsIdRefCall
}
